' Preview durch <Alt>d

@startuml Controller-Klasse

interface Promise<T>

package @nestjs/graphql {
  class "@Resolver" as Resolver
  hide Resolver circle

  class "@UseGuards" as UseGuards
  hide UseGuards circle

  class "@UseInterceptors" as UseInterceptors
  hide UseInterceptors circle

  class "@Mutation" as Mutation
  hide Mutation circle

  class "@Args" as Args
  hide Args circle
}

package security.auth {
  class "type Role = 'ADMIN' | 'MITARBEITER' | 'KUNDE'" as Role
  hide Role circle

  class "@Roles" as Roles
  hide Roles circle

  Roles .right.> Role
}

package computer #DDDDDD {
  package entity #FFFFFF {
    class Computer <<entity>>
  }

  package service #FFFFFF {
    class ComputerWriteService << control >>
  }

  class "type ComputerDTO = Omit<Computer, 'aktualisiert' | 'erzeugt'>" as ComputerDTO
  hide ComputerDTO circle

  class ComputerMutationResolver << control >> << @Resolver() >> << @UseGuards() >> << @UseInterceptors() >> {
    + @Mutation() @Roles() async create(@Args() computer: Computer): Promise<string>
    + @Mutation() @Roles() async update(@Args() computer: ComputerDTO): Promise<number>
    + @Mutation() @Roles() async delete(@Args() id: string): Promise<boolean>
  }

  ComputerMutationResolver o-down-> "1" ComputerWriteService : service

  ComputerMutationResolver ..> Computer
  ComputerMutationResolver ..> ComputerDTO
  ComputerDTO .up.> Computer
  ComputerMutationResolver ..> Promise
  ComputerMutationResolver ..> Resolver

  ComputerMutationResolver .up.> Roles
  ComputerMutationResolver .up.> Role

  ComputerDTO .[hidden].> Promise
  ComputerDTO .[hidden].> Resolver
}

hide empty members

@enduml
