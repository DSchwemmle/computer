' Preview durch <Alt>d

@startuml Controller-Klasse

interface Promise<T>

package @nestjs/common {
  class "@Controller" as Controller
  hide Controller circle

  class "@Get" as Get
  hide Get circle

  class "@Req" as Req
  hide Req circle

  class "@Res" as Res
  hide Res circle

  class "@Param" as Param
  hide Param circle

  class "@Query" as Query
  hide Query circle

  class "@UseInterceptors" as UseInterceptors
  hide UseInterceptors circle
}

package express {
  class Request
  class Response

  Response .[hidden].> Controller
}

package computer {
  package entity #FFFFFF {
    class Computer <<entity>>

    Computer .[hidden].> Promise
    Computer .[hidden].> Request
  }

  package service {
    class ComputerReadService << control >>
  }

  package rest #DDDDDD {
    ComputerQuery -up-|> Computer

    class ComputerGetController << control >> << @Controller() >> << @UseGuards() >> << @UseInterceptors() >> {
      + @Get() async findById(@Param() id: string, @Req() req: Request, @Headers() version: string, @Res() res: Response): Promise<Response<ComputerModel | undefined>>
      + @Get() async find(@Query() query: ComputerQuery, @Req() req: Request,  @Res() res: Response): Promise<Response<ComputerListModel | undefined>>
    }

    ComputerGetController o--> "1" ComputerReadService : service

    ComputerGetController ..> Controller
    ComputerGetController ..> Request
    ComputerGetController ..> Response
    ComputerGetController ..> Promise
    ComputerGetController .up.> ComputerModel
    ComputerGetController .up.> ComputerQuery

    ComputerReadService .[hidden].> Request
    ComputerReadService .[hidden].> Promise
    Response .right[hidden].> Controller
  }
}

hide empty members

@enduml
